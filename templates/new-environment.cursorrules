# Cursor Rules - [ENVIRONMENT_NAME] Environment
# Template for creating new environment-specific rules

## AI ASSISTANT BEHAVIOR REQUIREMENTS - CRITICAL
- **MANDATORY PLANNING APPROVAL**: Before executing any commands, file changes, or automation:
  1. Present a concrete plan with specific steps
  2. Explain potential impacts and risks
  3. Wait for explicit user approval before proceeding
  4. No assumptions - always ask for clarification when uncertain

## MCP SERVER REQUIREMENTS - CRITICAL
- **AWS Operations**: When creating plans involving AWS, consult AWS MCP servers for guidance on:
  - Cost effectiveness and optimization recommendations
  - Security best practices and compliance requirements
  - Service selection and configuration best practices
  - This includes guidance for: EC2, S3, IAM, CloudFormation, Route53, and all other AWS services
- **Terraform Operations**: When creating infrastructure plans, consult HashiCorp's Terraform MCP servers for guidance on:
  - Cost effectiveness and resource optimization
  - Security configurations and best practices
  - Infrastructure design patterns and recommendations
  - This applies to all infrastructure-as-code planning and implementation

## ENVIRONMENT-SPECIFIC REQUIREMENTS
# Add environment-specific rules here:
# - Special tooling requirements
# - Environment-specific paths
# - Custom validation rules
# - Special security requirements

## LOGGING REQUIREMENTS - CRITICAL
- ALL scripts must log to: /Users/alexcaldwell/the-warehouse/logs/[ENVIRONMENT_NAME]/
- Directory structure: /Users/alexcaldwell/the-warehouse/logs/[environment-name]/[script-name].log
- Log file naming convention: `script-name.log` (single continuous log file per script)
- Use log rotation to manage file size (logrotate or similar)
- Include log levels: INFO, WARN, ERROR, DEBUG
- Log both successful operations and errors
- Always include timestamps in log entries
- Append to existing log file - do NOT create new files for each run

## GENERAL CODING PRINCIPLES
- Follow DRY (Don't Repeat Yourself) principles
- Use KISS (Keep It Simple, Stupid) approach
- Implement single responsibility for functions/scripts
- Always include proper error handling and logging
- Never commit secrets, API keys, or passwords to version control

## SECURITY REQUIREMENTS
- Never hardcode credentials in source code
- Use environment variables or secure secret management
- Implement least privilege access principles
- For AWS: Use IAM roles instead of access keys when possible
- Enable proper audit logging
- Use MFA for all administrative accounts

# Add additional sections as needed for your environment:
# - Language-specific requirements
# - Framework-specific rules
# - Testing requirements
# - Documentation standards
# - Deployment procedures